[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "python-langchain-unstructured"
version = "0.7.1"
description = "A wrapper project for installing Unstructured for Langchain projects."
authors = ["Christo De Lange <christo.delange@sands.com>"]
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = [ "gitops", "devops", ]
include = [
    "*.cfg",
    "*.json",
    "*.yaml",
]
license = "(c) 2022 Las Vegas Sands"

[tool.poetry.urls]
Homepage = "https://github.com/SandsB2B/python-langchain-unstructured"
Documentation = "https://python-langchain-unstructured.docs.infra-area2.com/"
Changelog = "https://github.com/SandsB2B/python-langchain-unstructured/blob/main/CHANGELOG.md"

[[tool.poetry.source]]
name = "codeartifact"
url = "https://artifacts-433714148419.d.codeartifact.us-east-2.amazonaws.com/pypi/pypi/simple/"
secondary = false
default = true

[tool.poetry.dependencies]
python = ">=3.10.9,<3.11.0"
packaging = ">=21.3"

[tool.poetry.group.dev.dependencies]
pip = "~23.0.0"
poetry = "~1.3.2"
virtualenv = "~20.10.0"
poethepoet = "~0.15.0"
invoke = "1.7.3"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = { version = "~6.5.0", extras = ["toml"] }
pytest = "~7.2.0"
pytest-cov = "~4.0.0"
pytest-doctestplus = "~0.12.1"
#pytest-html = "^3.2.0"

[tool.poetry.group.local-dev]
optional = true

[tool.poetry.group.local-dev.dependencies]
# https://githubplus.com/PyCQA/prospector/issues/539 1.7.7 with pylint>=2.15.7
# We can either pin pylint or hope a newer prospector fixes the problem.
# UPDATE: Fixed in 1.8.4 ... By US! :)
#pylint = "==2.15.6"
#prospector = { extras = ["with-everything"], version = "~1.8.4" }
prospector = { git = "https://github.com/christokur/prospector.git", extras = ["with-everything"], branch = "master" }
black = { version = "~22.10.0" }
isort = { version = "~5.11.5" }
pre-commit = { version = "~2.21.0" }
pyproject-fmt = { version = "~0.3.5" }
gitlint = { version = "^0.18.0" }
commitizen = { version = "^2.38.0" }
#gitown = { version = "~0.2.3" }
#gitown = { git = "https://github.com/christokur/gitown.git", tag = "v0.2.5" }
poetry-plugin-bump2version = { version = "~0.9.0" }
# cruft = "~2.12.0"
cruft = { git = "https://github.com/christokur/cruft.git", branch = "master" }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
#mkdocs = "~1.4.2"
#portray = "~1.8.0"
pdocs = { git = "https://github.com/christokur/pdocs.git", branch = "master" }
portray = { git = "https://github.com/christokur/portray.git", branch = "main" }
mkdocs-material = { version = ">=8.1.4,<9.0.0" }
mdx-include = { version = ">=1.4.1,<2.0.0" }
mkdocs-markdownextradata-plugin = { version = ">=0.1.7,<0.3.0" }
mkdocs-simple-hooks = { version = "~0.1.5" }
pydocstyle = { version = "~6.1.1", extras = ["toml"] }

[tool.poetry_bump2version.options]
list = true
allow_dirty = true
tag = true
commit = true
verbose = 1

[tool.black]
line-length = 120
target-version = ['py310', 'py311']
# 'force-exclude' excludes files or directories in addition to the defaults
force-exclude = '(^/.github/*, ^/.vscode/*, .*\.tf)'
# extend-exclude: keep excluding files from .gitignore in addition to the ones specified
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  ^/\{\{cookiecutter.project_name\}\}/.*
  | .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
)
'''

[tool.flake8]
max-line-length = 120
extend-ignore = "E203"

[tool.isort]
profile = "black"
skip_gitignore = true

[tool.pytest.ini_options]
testpaths = [ "src/", "tests",  ]
addopts = ["--doctest-modules"]

[tool.pydocstyle]
convention = "google"
add_select = "D401,D404"

[tool.coverage.run]
command_line = "-m pytest --doctest-modules"
source = [ "src/", "tests", ]
parallel = true
branch = true # measure branch coverage in addition to statement coverage

[tool.coverage.report]
fail_under = 25

[tool.coverage.paths]
source = [
    "src/unstructured",
    "**/site-packages/unstructured",
]

[tool.poe.env]
PYTHONWARNINGS = "ignore::Warning:setuptools.command.install"

[tool.poe.tasks]
pyproject-fmt = { shell = "pyproject-fmt pyproject.toml" }
check-lock = { shell = "poetry lock --check | grep -v 'not consistent'", help = "poetry lock workaround for https://github.com/nat-n/poethepoet/issues/91" }
set-lock = { shell = "poetry lock --no-update", help = "Locks the project dependencies in poetry.lock" }
pc-install = { shell = "pre-commit install; gitlint install-hook", help = "Set up pre-commit hooks" }
pc-autoupdate = { shell = "pre-commit autoupdate", help = "Auto update pre-commit hooks" }
hooks = { shell = "git add -A; pre-commit run", help = "Run pre-commit hooks" }
isort = { shell = "export PYTHONWARNINGS='ignore::Warning:setuptools.command.install'; isort src/ tests ", help = "isort imports in src/ and tests " }
black = { shell = "black src/ tests ", help = "black formatting in src/ and tests " }
tests = { shell = "poetry run pytest --doctest-modules src/ tests ", help = "pytest's" }
pros = { shell = "prospector --profile prospector.yaml", help = "Prospector" }
b2v = { cmd = "bump2version patch --new-version '${version}' --allow-dirty --commit", args = [{ name = "version", positional = true, multiple = false }], help = "Prospector" }
gcl = { shell = "cz changelog --incremental || { echo 'With incremental changelog we are ok when there is nothing new to add ...'; true; }", help = "Git Changelog" }
gl = { shell = "gitlint", help = "Gitlint last commit" }
gitown = { shell = "gitown --ownership_threshold=10 --codeowners_filename=CODEOWNERS CODEOWNERS", help = "Githib CODEOWNERS" }
format = { shell = "black --check --diff ." }
add = { shell = "git add -A" }
ibtl = { sequence = ["isort", "black", "tests", "lint"] }
doctests = { shell = "poetry run pytest --doctest-modules --verbose src/", help = "doctest's" }
prepare = { sequence = ["locks", "exports", "formats", "tests", "gcl", "gitown", "docs-make", "add", "hooks"], help = "Do things to prepare for release" }
docs-make = { shell = "make docs || true" }
docs-build = { shell = "rm -fr site || true; PYTHONPATH=src/ poetry run portray as_html" }
docs-serve = { shell = "rm -fr site || true; PYTHONPATH=src/ poetry run portray in_browser --reload" }
pu = { shell = "poetry update", help = "Poetry update" }
pule = { sequence = ["pu", "locks", "exports"], help = "Poetry update and exports" }
exports = { sequence = ["export", "export-dev"], help = "Do things to export" }
formats = { sequence = ["isort", "black"], help = "Run checks" }
locks = { sequence = ["set-lock", "check-lock"], help = "Manage poetry.lock" }

[tool.poe.tasks.lint]
shell = """
python -m black --check src/ tests 
python -m isort --check-only src/  tests 
python -m prospector --profile prospector.yaml
"""
help = "Do a few lint checks"

[tool.poe.tasks.test-cov]
shell = """
coverage run -m pytest --doctest-modules src/ tests 
coverage combine
coverage lcov -o coverage/lcov.info
coverage report
"""
help = "Check test coverage"

[tool.poe.tasks.export-dev]
shell = """
export PYTHONWARNINGS=ignore::Warning:setuptools.command.install
python3 -m poetry export --without-hashes --with dev -f requirements.txt -o requirements-dev.txt
"""
help = "Export poetry deps to requirements-dev.txt"
interpreter = "bash"

[tool.poe.tasks.export]
shell = """
export PYTHONWARNINGS=ignore::Warning:setuptools.command.install
python3 -m poetry export --without-hashes -f requirements.txt -o requirements.txt
"""
help = "Export poetry deps to requirements.txt"
env = { "PYTHONWARNINGS" = "ignore::Warning:setuptools.command.install" }
interpreter = "bash"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.7.1"
version_files = [
    ".bumpversion.cfg",
    "VERSION",
    "pyproject.toml:version",
]
tag_format = "v$version"
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.portray]
docs_dir = "docs"
output_dir = "site"
modules = ["unstructured"]
port = 8000
append_directory_to_python_path = true
include_reference_documentation = true
extra_markdown_extensions = ["admonition", "codehilite", "extra"]

[tool.portray.pdocs]
# TODO: [2023-01-25 Christo]: excluded_modules = ["cli.console.vendor",]

[tool.portray.mkdocs]
site_name = "Python Unstructured"
site_description = "A wrapper project for installing Unstructured for Langchain projects."
site_url = "https://python-langchain-unstructured.docs.infra-area2.com/"
repo_url = "https://github.com/SandsB2B/python-langchain-unstructured"
edit_uri = "edit/master"
copyright = "(c) 2022 Las Vegas Sands"

extra = { generator = false }
extra_css = ["/docs/css/termynal.css", "/docs/css/custom.css"]
extra_javascript = ["/docs/js/termynal.js", "/docs/js/custom.js"]
strict = true
#hooks = [ "docs/hooks/clusters_hook.py" ] [2023-01-26 Christo] Requires 1.4.x

#[tool.portray.mkdocs.plugins]
#"mkdocs-simple-hooks" = { hooks = { "on_config" = "docs.hooks.clusters:on_config" } }

[tool.portray.mkdocs.theme]
name = "material"
features = [ "search.suggest", "search.highlight", "content.tabs.link" ]
icon = { repo = "fontawesome/brands/github" }
custom_dir = "docs/overrides"

[[tool.portray.mkdocs.theme.palette]]
media = "(prefers-color-scheme: light)"
scheme = "default"
primary = "teal"
accent = "brown"
toggle = { icon = "material/lightbulb", name = "Switch to light mode" }

[[tool.portray.mkdocs.theme.palette]]
media = "(prefers-color-scheme: dark)"
scheme = "slate"
primary = "teal"
accent = "yellow"
toggle = { icon = "material/lightbulb-outline", name = "Switch to dark mode" }

[tool.cruft]
skip= [".bumpversion.cfg","CODEOWNERS","docs/TODO.md","README.md",]
