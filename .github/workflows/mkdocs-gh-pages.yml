name: Deploy mkdocs to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
    - main
    - master
    - develop
  pull_request:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  docs-build:
    strategy:
      matrix:
        # Put the version we consider mainline and publish with
        python-version: [ "3.8" ]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION_TOOLS: "us-east-2"
      AWS_ACCOUNT_TOOLS: "433714148419"
      PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
      PYTHONPATH: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install terraform-docs
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with: # Grab a specific tag
          repo: terraform-docs/terraform-docs
          tag: v0.16.0

      - uses: actions/setup-python@v4
        id: setup_python
        with:
          python-version: ${{ matrix.python-version }}
          #cache: poetry

      - name: Install poetry
        run: |
          echo python-path:'${{ steps.setup_python.outputs.python-path }}'
          ${{ steps.setup_python.outputs.python-path }} --version
          ${{ steps.setup_python.outputs.python-path }} -m pip install poetry

      - name: Self-Configure AWS Credentials
        continue-on-error: false
        shell: bash
        run: |
          set +e
          export PAGER=''
          aws --version
          set | grep '^(AWS_|GITHUB_|RUNNER_)'

          aws sts get-caller-identity 2>&1

          export AWS_PROFILE=b2b-master
          aws configure set output json --profile=$AWS_PROFILE 2>&1
          aws configure set region ${AWS_DEFAULT_REGION:-us-east-2} --profile=$AWS_PROFILE 2>&1
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile=$AWS_PROFILE 2>&1
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile=$AWS_PROFILE 2>&1
          test -z "$AWS_SESSION_TOKEN" || aws configure set aws_session_token $AWS_SESSION_TOKEN --profile=$AWS_PROFILE 2>&1

          export AWS_PROFILE=cloud-services-prod
          aws configure set output json --profile=$AWS_PROFILE 2>&1
          aws configure set region ${AWS_DEFAULT_REGION:-us-east-2} --profile=$AWS_PROFILE 2>&1
          aws configure set role_arn arn:aws:iam::$AWS_ACCOUNT_TOOLS:role/github-terraform-pipelines --profile=$AWS_PROFILE 2>&1
          aws configure set source_profile b2b-master --profile=$AWS_PROFILE 2>&1

          aws configure list-profiles 2>&1

      - name: Set up access to CodeArtifact
        run: |
          set +e
          export PAGER=''
          #export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
          export AWS_PROFILE=cloud-services-prod
          aws sts get-caller-identity --profile=$AWS_PROFILE 2>&1
          aws codeartifact login --tool pip --repository pypi --domain artifacts --domain-owner $AWS_ACCOUNT_TOOLS --profile=$AWS_PROFILE
          AWS_CODEARTIFACT_GRE=$(aws codeartifact get-repository-endpoint --domain artifacts --domain-owner ${AWS_ACCOUNT_TOOLS} --profile ${AWS_PROFILE} --region ${AWS_REGION_TOOLS} --repository pypi --format pypi --query @.repositoryEndpoint --output text)
          AWS_CODEARTIFACT_GAT=$(aws codeartifact get-authorization-token --domain artifacts --domain-owner ${AWS_ACCOUNT_TOOLS} --profile ${AWS_PROFILE} --region ${AWS_REGION_TOOLS} --query @.authorizationToken --output text)

          poetry config --unset repos.codeartifact || true
          poetry config repo.codeartifact ${AWS_CODEARTIFACT_GRE}
          poetry config http-basic.codeartifact aws ${AWS_CODEARTIFACT_GAT}

          #poetry config --unset repos.codeartifactpublish || true
          #poetry config repo.codeartifactpublish ${AWS_CODEARTIFACT_GRE}
          #poetry config http-basic.codeartifactpublish aws ${AWS_CODEARTIFACT_GAT}

          set | egrep -e '^(POETRY|PYTHON|AWS)'; poetry config --list; set | grep POETRY || true

      - name: Check poetry.lock
        run: poetry lock --check

      - name: Install dependencies
        run: |
          #poetry env use ${{ matrix.python-version }}
          poetry install --with main,docs --no-ansi --no-interaction

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build docs
        run: |
          poetry run poe docs-build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          name: github-pages
          path: ./site

  # Deployment job
  docs-publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: docs-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
